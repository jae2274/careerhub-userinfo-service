// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: careerhub/userinfo_service/suggester/suggester_grpc/suggester.proto

package suggester_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuggesterGrpcClient is the client API for SuggesterGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggesterGrpcClient interface {
	StartBatch(ctx context.Context, in *StartBatchRequest, opts ...grpc.CallOption) (*StartBatchResponse, error)
	GetConditions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConditionsResponse, error)
	EndBatch(ctx context.Context, in *EndBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type suggesterGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggesterGrpcClient(cc grpc.ClientConnInterface) SuggesterGrpcClient {
	return &suggesterGrpcClient{cc}
}

func (c *suggesterGrpcClient) StartBatch(ctx context.Context, in *StartBatchRequest, opts ...grpc.CallOption) (*StartBatchResponse, error) {
	out := new(StartBatchResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/StartBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterGrpcClient) GetConditions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConditionsResponse, error) {
	out := new(GetConditionsResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/GetConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggesterGrpcClient) EndBatch(ctx context.Context, in *EndBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/EndBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggesterGrpcServer is the server API for SuggesterGrpc service.
// All implementations must embed UnimplementedSuggesterGrpcServer
// for forward compatibility
type SuggesterGrpcServer interface {
	StartBatch(context.Context, *StartBatchRequest) (*StartBatchResponse, error)
	GetConditions(context.Context, *emptypb.Empty) (*GetConditionsResponse, error)
	EndBatch(context.Context, *EndBatchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSuggesterGrpcServer()
}

// UnimplementedSuggesterGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedSuggesterGrpcServer struct {
}

func (UnimplementedSuggesterGrpcServer) StartBatch(context.Context, *StartBatchRequest) (*StartBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBatch not implemented")
}
func (UnimplementedSuggesterGrpcServer) GetConditions(context.Context, *emptypb.Empty) (*GetConditionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditions not implemented")
}
func (UnimplementedSuggesterGrpcServer) EndBatch(context.Context, *EndBatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBatch not implemented")
}
func (UnimplementedSuggesterGrpcServer) mustEmbedUnimplementedSuggesterGrpcServer() {}

// UnsafeSuggesterGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggesterGrpcServer will
// result in compilation errors.
type UnsafeSuggesterGrpcServer interface {
	mustEmbedUnimplementedSuggesterGrpcServer()
}

func RegisterSuggesterGrpcServer(s grpc.ServiceRegistrar, srv SuggesterGrpcServer) {
	s.RegisterService(&SuggesterGrpc_ServiceDesc, srv)
}

func _SuggesterGrpc_StartBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterGrpcServer).StartBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/StartBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterGrpcServer).StartBatch(ctx, req.(*StartBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggesterGrpc_GetConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterGrpcServer).GetConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/GetConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterGrpcServer).GetConditions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggesterGrpc_EndBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggesterGrpcServer).EndBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.suggester_grpc.SuggesterGrpc/EndBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggesterGrpcServer).EndBatch(ctx, req.(*EndBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuggesterGrpc_ServiceDesc is the grpc.ServiceDesc for SuggesterGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuggesterGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "careerhub.userinfo_service.suggester_grpc.SuggesterGrpc",
	HandlerType: (*SuggesterGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBatch",
			Handler:    _SuggesterGrpc_StartBatch_Handler,
		},
		{
			MethodName: "GetConditions",
			Handler:    _SuggesterGrpc_GetConditions_Handler,
		},
		{
			MethodName: "EndBatch",
			Handler:    _SuggesterGrpc_EndBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "careerhub/userinfo_service/suggester/suggester_grpc/suggester.proto",
}
