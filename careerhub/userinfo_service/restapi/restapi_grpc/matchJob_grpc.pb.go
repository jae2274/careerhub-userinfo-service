// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: careerhub/userinfo_service/restapi/restapi_grpc/matchJob.proto

package restapi_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchJobGrpcClient is the client API for MatchJobGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchJobGrpcClient interface {
	FindMatchJob(ctx context.Context, in *FindMatchJobRequest, opts ...grpc.CallOption) (*FindMatchJobResponse, error)
	AddCondition(ctx context.Context, in *AddConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	UpdateAgreeToMail(ctx context.Context, in *UpdateAgreeToMailRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
}

type matchJobGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchJobGrpcClient(cc grpc.ClientConnInterface) MatchJobGrpcClient {
	return &matchJobGrpcClient{cc}
}

func (c *matchJobGrpcClient) FindMatchJob(ctx context.Context, in *FindMatchJobRequest, opts ...grpc.CallOption) (*FindMatchJobResponse, error) {
	out := new(FindMatchJobResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/FindMatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchJobGrpcClient) AddCondition(ctx context.Context, in *AddConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/AddCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchJobGrpcClient) UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/UpdateCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchJobGrpcClient) DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/DeleteCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchJobGrpcClient) UpdateAgreeToMail(ctx context.Context, in *UpdateAgreeToMailRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/UpdateAgreeToMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchJobGrpcServer is the server API for MatchJobGrpc service.
// All implementations must embed UnimplementedMatchJobGrpcServer
// for forward compatibility
type MatchJobGrpcServer interface {
	FindMatchJob(context.Context, *FindMatchJobRequest) (*FindMatchJobResponse, error)
	AddCondition(context.Context, *AddConditionRequest) (*IsSuccessResponse, error)
	UpdateCondition(context.Context, *UpdateConditionRequest) (*IsSuccessResponse, error)
	DeleteCondition(context.Context, *DeleteConditionRequest) (*IsSuccessResponse, error)
	UpdateAgreeToMail(context.Context, *UpdateAgreeToMailRequest) (*IsSuccessResponse, error)
	mustEmbedUnimplementedMatchJobGrpcServer()
}

// UnimplementedMatchJobGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedMatchJobGrpcServer struct {
}

func (UnimplementedMatchJobGrpcServer) FindMatchJob(context.Context, *FindMatchJobRequest) (*FindMatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMatchJob not implemented")
}
func (UnimplementedMatchJobGrpcServer) AddCondition(context.Context, *AddConditionRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCondition not implemented")
}
func (UnimplementedMatchJobGrpcServer) UpdateCondition(context.Context, *UpdateConditionRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedMatchJobGrpcServer) DeleteCondition(context.Context, *DeleteConditionRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCondition not implemented")
}
func (UnimplementedMatchJobGrpcServer) UpdateAgreeToMail(context.Context, *UpdateAgreeToMailRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgreeToMail not implemented")
}
func (UnimplementedMatchJobGrpcServer) mustEmbedUnimplementedMatchJobGrpcServer() {}

// UnsafeMatchJobGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchJobGrpcServer will
// result in compilation errors.
type UnsafeMatchJobGrpcServer interface {
	mustEmbedUnimplementedMatchJobGrpcServer()
}

func RegisterMatchJobGrpcServer(s grpc.ServiceRegistrar, srv MatchJobGrpcServer) {
	s.RegisterService(&MatchJobGrpc_ServiceDesc, srv)
}

func _MatchJobGrpc_FindMatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchJobGrpcServer).FindMatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/FindMatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchJobGrpcServer).FindMatchJob(ctx, req.(*FindMatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchJobGrpc_AddCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchJobGrpcServer).AddCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/AddCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchJobGrpcServer).AddCondition(ctx, req.(*AddConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchJobGrpc_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchJobGrpcServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/UpdateCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchJobGrpcServer).UpdateCondition(ctx, req.(*UpdateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchJobGrpc_DeleteCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchJobGrpcServer).DeleteCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/DeleteCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchJobGrpcServer).DeleteCondition(ctx, req.(*DeleteConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchJobGrpc_UpdateAgreeToMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgreeToMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchJobGrpcServer).UpdateAgreeToMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.userinfo_service.restapi_grpc.MatchJobGrpc/UpdateAgreeToMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchJobGrpcServer).UpdateAgreeToMail(ctx, req.(*UpdateAgreeToMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchJobGrpc_ServiceDesc is the grpc.ServiceDesc for MatchJobGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchJobGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "careerhub.userinfo_service.restapi_grpc.MatchJobGrpc",
	HandlerType: (*MatchJobGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMatchJob",
			Handler:    _MatchJobGrpc_FindMatchJob_Handler,
		},
		{
			MethodName: "AddCondition",
			Handler:    _MatchJobGrpc_AddCondition_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _MatchJobGrpc_UpdateCondition_Handler,
		},
		{
			MethodName: "DeleteCondition",
			Handler:    _MatchJobGrpc_DeleteCondition_Handler,
		},
		{
			MethodName: "UpdateAgreeToMail",
			Handler:    _MatchJobGrpc_UpdateAgreeToMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "careerhub/userinfo_service/restapi/restapi_grpc/matchJob.proto",
}
